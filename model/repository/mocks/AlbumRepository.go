// Code generated by MockGen. DO NOT EDIT.
// Source: model/repository/AlbumRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
reflect "reflect"
errors "web/service/gin/errors"
entities "web/service/gin/model/entities"

gomock "github.com/golang/mock/gomock"
)

// MockAlbumRepositoryI is a mock of AlbumRepositoryI interface.
type MockAlbumRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumRepositoryIMockRecorder
}

// MockAlbumRepositoryIMockRecorder is the mock recorder for MockAlbumRepositoryI.
type MockAlbumRepositoryIMockRecorder struct {
	mock *MockAlbumRepositoryI
}

// NewMockAlbumRepositoryI creates a new mock instance.
func NewMockAlbumRepositoryI(ctrl *gomock.Controller) *MockAlbumRepositoryI {
	mock := &MockAlbumRepositoryI{ctrl: ctrl}
	mock.recorder = &MockAlbumRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumRepositoryI) EXPECT() *MockAlbumRepositoryIMockRecorder {
	return m.recorder
}

// CreateNewAlbum mocks base method.
func (m *MockAlbumRepositoryI) CreateNewAlbum(newAlbum entities.Album) (*int64, *errors.ErrorBodyResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewAlbum", newAlbum)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(*errors.ErrorBodyResponse)
	return ret0, ret1
}

// CreateNewAlbum indicates an expected call of CreateNewAlbum.
func (mr *MockAlbumRepositoryIMockRecorder) CreateNewAlbum(newAlbum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewAlbum", reflect.TypeOf((*MockAlbumRepositoryI)(nil).CreateNewAlbum), newAlbum)
}

// DeleteAlbum mocks base method.
func (m *MockAlbumRepositoryI) DeleteAlbum(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAlbum", id)
}

// DeleteAlbum indicates an expected call of DeleteAlbum.
func (mr *MockAlbumRepositoryIMockRecorder) DeleteAlbum(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbum", reflect.TypeOf((*MockAlbumRepositoryI)(nil).DeleteAlbum), id)
}

// GetAlbumById mocks base method.
func (m *MockAlbumRepositoryI) GetAlbumById(id string) (*entities.Album, *errors.ErrorBodyResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumById", id)
	ret0, _ := ret[0].(*entities.Album)
	ret1, _ := ret[1].(*errors.ErrorBodyResponse)
	return ret0, ret1
}

// GetAlbumById indicates an expected call of GetAlbumById.
func (mr *MockAlbumRepositoryIMockRecorder) GetAlbumById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumById", reflect.TypeOf((*MockAlbumRepositoryI)(nil).GetAlbumById), id)
}

// GetAllAlbums mocks base method.
func (m *MockAlbumRepositoryI) GetAllAlbums() []entities.Album {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbums")
	ret0, _ := ret[0].([]entities.Album)
	return ret0
}

// GetAllAlbums indicates an expected call of GetAllAlbums.
func (mr *MockAlbumRepositoryIMockRecorder) GetAllAlbums() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbums", reflect.TypeOf((*MockAlbumRepositoryI)(nil).GetAllAlbums))
}

// UpdateAlbum mocks base method.
func (m *MockAlbumRepositoryI) UpdateAlbum(updatedAlbum entities.Album) (*int64, *errors.ErrorBodyResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlbum", updatedAlbum)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(*errors.ErrorBodyResponse)
	return ret0, ret1
}

// UpdateAlbum indicates an expected call of UpdateAlbum.
func (mr *MockAlbumRepositoryIMockRecorder) UpdateAlbum(updatedAlbum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlbum", reflect.TypeOf((*MockAlbumRepositoryI)(nil).UpdateAlbum), updatedAlbum)
}