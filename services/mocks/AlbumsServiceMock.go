// Code generated by MockGen. DO NOT EDIT.
// Source: services/AlbumsService.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entities "web/service/gin/model/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockIAlbumService is a mock of IAlbumService interface.
type MockIAlbumService struct {
	ctrl     *gomock.Controller
	recorder *MockIAlbumServiceMockRecorder
}

// MockIAlbumServiceMockRecorder is the mock recorder for MockIAlbumService.
type MockIAlbumServiceMockRecorder struct {
	mock *MockIAlbumService
}

// NewMockIAlbumService creates a new mock instance.
func NewMockIAlbumService(ctrl *gomock.Controller) *MockIAlbumService {
	mock := &MockIAlbumService{ctrl: ctrl}
	mock.recorder = &MockIAlbumServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAlbumService) EXPECT() *MockIAlbumServiceMockRecorder {
	return m.recorder
}

// DeleteAlbum mocks base method.
func (m *MockIAlbumService) DeleteAlbum(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAlbum", id)
}

// DeleteAlbum indicates an expected call of DeleteAlbum.
func (mr *MockIAlbumServiceMockRecorder) DeleteAlbum(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbum", reflect.TypeOf((*MockIAlbumService)(nil).DeleteAlbum), id)
}

// GetAlbumById mocks base method.
func (m *MockIAlbumService) GetAlbumById(id string) (int, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumById", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// GetAlbumById indicates an expected call of GetAlbumById.
func (mr *MockIAlbumServiceMockRecorder) GetAlbumById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumById", reflect.TypeOf((*MockIAlbumService)(nil).GetAlbumById), id)
}

// GetAlbums mocks base method.
func (m *MockIAlbumService) GetAlbums() []entities.Album {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbums")
	ret0, _ := ret[0].([]entities.Album)
	return ret0
}

// GetAlbums indicates an expected call of GetAlbums.
func (mr *MockIAlbumServiceMockRecorder) GetAlbums() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbums", reflect.TypeOf((*MockIAlbumService)(nil).GetAlbums))
}

// PostAlbums mocks base method.
func (m *MockIAlbumService) PostAlbums(album entities.Album) (int, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAlbums", album)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// PostAlbums indicates an expected call of PostAlbums.
func (mr *MockIAlbumServiceMockRecorder) PostAlbums(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAlbums", reflect.TypeOf((*MockIAlbumService)(nil).PostAlbums), album)
}

// PutAlbum mocks base method.
func (m *MockIAlbumService) PutAlbum(album entities.Album) (int, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAlbum", album)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// PutAlbum indicates an expected call of PutAlbum.
func (mr *MockIAlbumServiceMockRecorder) PutAlbum(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAlbum", reflect.TypeOf((*MockIAlbumService)(nil).PutAlbum), album)
}
